// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  angular;
  Markdown;
  var AngularBase, BaseInstance, BaseService, FetchPartialService, FetchResourceService, MarkdownService, PathManipulator, install_angular_cls, services_module,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  AngularBase = window.ciboulot['AngularBase'];

  install_angular_cls = window.ciboulot['install_angular_cls'];

  window.ciboulot['popup'] = 0;

  services_module = angular.module('ciboulot.services', []);

  BaseService = (function(superClass) {
    extend(BaseService, superClass);

    function BaseService() {
      return BaseService.__super__.constructor.apply(this, arguments);
    }

    BaseService.prototype.__name = 'BaseService';

    BaseService.prototype.__module_install_function = function(cls, module) {

      /*
      NOTE: ServiceCls.__factory called only once
            when registred via module.service
       */
      return module.service;
    };

    return BaseService;

  })(AngularBase);

  BaseInstance = (function(superClass) {
    extend(BaseInstance, superClass);

    function BaseInstance() {
      return BaseInstance.__super__.constructor.apply(this, arguments);
    }


    /*
    Same as BaseService, but __factory instantiates 
    the class
     */

    BaseInstance.prototype.__name = 'BaseInstance';

    BaseInstance.prototype.__factory = function(cls) {
      return new cls();
    };

    BaseInstance.prototype.__module_install_function = function(cls, module) {
      return module.service;
    };

    return BaseInstance;

  })(AngularBase);

  PathManipulator = (function(superClass) {
    extend(PathManipulator, superClass);

    function PathManipulator() {
      return PathManipulator.__super__.constructor.apply(this, arguments);
    }

    PathManipulator.prototype.__name = 'path_manipulator';

    PathManipulator.prototype.base = function(path) {
      var last_char, last_slash_index;
      last_char = path.slice(-1);
      if (last_char === '/') {
        return path;
      } else {
        last_slash_index = path.lastIndexOf('/');
        return path.substring(0, last_slash_index + 1);
      }
    };

    PathManipulator.prototype.parent = function(path) {
      var last_char;
      last_char = path.slice(-1);
      if (last_char === '/') {
        return this.base(path.slice(0, -1));
      } else {
        return this.parent(this.base(path));
      }
    };

    PathManipulator.prototype.join_paths = function(path1, path2) {
      if (path2.slice(0, 2) === "./") {
        path2 = path2.slice(2);
        path1 = this.base(path1);
        return this.join_paths(path1, path2);
      } else if (path2.slice(0, 3) === "../") {
        path2 = path2.slice(3);
        path1 = this.parent(path1);
        return this.join_paths(path1, path2);
      } else {
        return "" + path1 + path2;
      }
    };

    PathManipulator.prototype.resolve_path = function(src, path) {
      if (path[0] === '/') {
        return path;
      } else {
        return this.join_paths(src, path);
      }
    };

    PathManipulator.prototype.id_of_path = function(path) {
      var last_slash_index;
      last_slash_index = path.lastIndexOf('/');
      if (last_slash_index >= -1) {
        path = path.substring(last_slash_index + 1, path.length);
      }
      return "" + path;
    };

    PathManipulator.prototype.filename_of_path = function(path) {
      return this.id_of_path(path);
    };

    return PathManipulator;

  })(BaseInstance);

  MarkdownService = (function(superClass) {
    extend(MarkdownService, superClass);

    MarkdownService.prototype.__name = 'MarkdownService';

    MarkdownService.prototype.__injections = BaseService.prototype.__injections.concat(['path_manipulator', '$rootScope']);

    MarkdownService.prototype.__NAME_ARG = '\\$\\[([\\w_-]+)( [^\\$\\n]*)?\\]';

    MarkdownService.prototype.__TEXT = '(\\([^\\$\\n\\)]*\\))*';

    MarkdownService.prototype.__ONE_TEXT = '\\([^\\$\\n\\)]*\\)';

    function MarkdownService(markdown_text1, src1, mode1) {
      this.markdown_text = markdown_text1;
      this.src = src1;
      this.mode = mode1;
    }

    MarkdownService.prototype.initialize = function() {
      return this.test = 'asdf';
    };

    MarkdownService.prototype.process_line = function(line) {
      return line;
    };

    MarkdownService.prototype.html_of_directive = function(directive) {
      var args, extension, filename, first_line, i, j, k, last_line, len, path, path_id, ref, retour, separateurs, seulement_les_separateurs, touche, touches;
      switch (directive.name) {
        case "embed":
          path = this.path_manipulator.resolve_path(this.src, directive.arg);
          return "<span src='" + path + "' ng-controller='embed' embed></span>";
        case "proc":
          path = this.path_manipulator.resolve_path(this.src, directive.arg);
          path_id = this.path_manipulator.id_of_path(path);
          return "<span src='" + path + "' ng-controller='proc' proc>\n<a class='proc-a' href='#" + path_id + "'>" + directive.text[0] + "</a>\n</span>";
        case "download":
          path = this.path_manipulator.resolve_path(this.src, directive.arg);
          filename = this.path_manipulator.filename_of_path(directive.arg);
          return "<a class='download-a' href='" + path + "' download='" + filename + "' target='_blank'>" + directive.text[0] + "</a>";
        case "link":
          path = this.path_manipulator.resolve_path(this.src, directive.arg);
          return "<a class='link-a' href='" + path + "'>" + directive.text[0] + "</a>";
        case "proc-list":
          return "<ul id='proc-list'></ul>";
        case "kbd":
          separateurs = /[ +]/;
          seulement_les_separateurs = directive.text[0];
          touches = directive.text[0].split(separateurs);
          for (j = 0, len = touches.length; j < len; j++) {
            touche = touches[j];
            seulement_les_separateurs = seulement_les_separateurs.replace(touche, "");
          }
          retour = "";
          for (i = k = 0, ref = seulement_les_separateurs.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
            touche = touches[i];
            retour += "<kbd>" + touche + "</kbd>";
            retour += seulement_les_separateurs.charAt(i);
          }
          return retour;
        case "java":
        case "html":
        case "css":
        case "xml":
        case "bash":
        case "ps1":
        case "json":
          extension = directive.name;
          args = directive.arg.split(' ');
          path = args[0];
          path = this.path_manipulator.resolve_path(this.src, path);
          path = path + "." + extension;
          first_line = "";
          if (args[1]) {
            first_line = "first_line='" + args[1] + "'";
          }
          last_line = "";
          if (args[2]) {
            last_line = "last_line='" + args[2] + "'";
          }
          return "<div class='file' src='" + path + "' " + first_line + " " + last_line + " extension='" + extension + "' file></div>";
        case "popup":
          path = "popup" + window.ciboulot['popup'];
          window.ciboulot['popup'] += 1;
          this.$rootScope.__resources[path] = {
            controller: directive.name,
            data: {
              title: this.src,
              text: directive.text
            }
          };
          return "<span class='popup' src='" + path + "' popup></span>";
        default:
          return "";
      }
    };

    MarkdownService.prototype.process_name_arg = function(name_arg) {
      var directive, j, len, name_arg_match, name_arg_pattern, text, text_match, text_pattern;
      directive = {
        name: '',
        arg: '',
        text: []
      };
      name_arg_pattern = new RegExp(this.__NAME_ARG);
      name_arg_match = name_arg.match(name_arg_pattern);
      if (name_arg_match[1] !== void 0) {
        directive.name = name_arg_match[1];
      }
      if (name_arg_match[2] !== void 0) {
        directive.arg = name_arg_match[2].slice(1);
      }
      text_pattern = new RegExp(this.__ONE_TEXT, 'g');
      text_match = name_arg.match(text_pattern);
      if (text_match !== null) {
        for (j = 0, len = text_match.length; j < len; j++) {
          text = text_match[j];
          text = text.substring(1, text.length - 1);
          directive.text.push(text);
        }
      }
      return this.html_of_directive(directive);
    };

    MarkdownService.prototype.process_markdown_text = function(markdown_text) {
      var pattern;
      pattern = new RegExp(this.__NAME_ARG + this.__TEXT, 'g');
      return markdown_text.replace(pattern, this.process_name_arg.bind(this));
    };

    MarkdownService.prototype.install_hooks = function() {
      return this.converter.hooks.chain("preConversion", this.process_markdown_text.bind(this));
    };

    MarkdownService.prototype.convert_html = function() {
      if (this.converter === void 0) {
        this.converter = new Markdown.Converter();
        this.install_hooks();
      }
      this.initialize();
      return this.html = this.converter.makeHtml(this.markdown_text);
    };

    MarkdownService.prototype.get_html = function() {
      if (this.html !== void 0) {
        return this.html;
      } else {
        this.convert_html();
        return this.html;
      }
    };

    return MarkdownService;

  })(BaseService);

  FetchResourceService = (function(superClass) {
    extend(FetchResourceService, superClass);

    function FetchResourceService() {
      return FetchResourceService.__super__.constructor.apply(this, arguments);
    }

    FetchResourceService.prototype.__name = 'FetchResourceService';

    return FetchResourceService;

  })(BaseService);

  FetchPartialService = (function(superClass) {
    extend(FetchPartialService, superClass);

    function FetchPartialService() {
      return FetchPartialService.__super__.constructor.apply(this, arguments);
    }

    FetchPartialService.prototype.__name = 'FetchPartialService';

    return FetchPartialService;

  })(BaseService);

  install_angular_cls(services_module, PathManipulator);

  install_angular_cls(services_module, MarkdownService);

  services_module.constant('RESOURCE_EXTENSION', 'cib');

  services_module.constant('FETCHING', '__fetching__');

  services_module.service('fetch_resource', [
    '$log', '$http', '$rootScope', 'RESOURCE_EXTENSION', 'FETCHING', function($log, $http, $rootScope, RESOURCE_EXTENSION, FETCHING) {
      return function(path) {
        var url;
        url = path;
        if (url[url.length - 1] === '/') {
          url = url + "index";
        }
        url = url + "." + RESOURCE_EXTENSION;
        $rootScope.__resources[path] = FETCHING;
        return ($http.get(url)).success(function(data, status, headers, config) {
          return $rootScope.__resources[path] = data[0];
        });
      };
    }
  ]);

  services_module.service('save_resource', [
    '$log', '$http', '$rootScope', 'RESOURCE_EXTENSION', function($log, $http, $rootScope, RESOURCE_EXTENSION) {
      return function(path) {
        var url;
        url = path + "." + RESOURCE_EXTENSION;
        return $http.post(url, $rootScope.__resources[path]);
      };
    }
  ]);

  services_module.service('fetch_partial', [
    '$log', '$http', '$rootScope', 'FETCHING', function($log, $http, $rootScope, FETCHING) {
      return function(directive, mode) {
        var key, url;
        url = "/__app/partials/" + directive + "/" + mode + ".html";
        key = directive + ":" + mode;
        $rootScope.__partials[key] = FETCHING;
        return ($http.get(url)).success(function(data, status, headers, config) {
          return $rootScope.__partials[key] = data;
        });
      };
    }
  ]);

  services_module.service('fetch_file', [
    '$log', '$http', '$rootScope', 'FETCHING', function($log, $http, $rootScope, FETCHING) {
      return function(path) {
        var url;
        url = path;
        $rootScope.__files[path] = FETCHING;
        return ($http.get(url)).success(function(data, status, headers, config) {
          return $rootScope.__files[path] = data;
        });
      };
    }
  ]);

  services_module.service('first_child_of_class', [
    '$log', function($log) {
      var first_child_of_class_rec;
      first_child_of_class_rec = function(elm, _class) {
        var child, children, j, k, l, len, len1, len2, ref, result;
        children = [];
        ref = elm.children();
        for (j = 0, len = ref.length; j < len; j++) {
          child = ref[j];
          children.push(angular.element(child));
        }
        for (k = 0, len1 = children.length; k < len1; k++) {
          child = children[k];
          if (child.hasClass(_class)) {
            return child;
          }
        }
        for (l = 0, len2 = children.length; l < len2; l++) {
          child = children[l];
          result = first_child_of_class_rec(child, _class);
          if (result !== void 0) {
            return result;
          }
        }
        return void 0;
      };
      return first_child_of_class_rec;
    }
  ]);

}).call(this);
